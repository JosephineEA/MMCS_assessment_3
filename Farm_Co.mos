model Farm_Co
uses "mmxprs"
! Assessment 3: 04/11/2022, Josephine Li, s2346729

! --- declarations ---!
  declarations
    ! index
    activities = 1..4
    lands = 1..10
    crops = 1..3
    years = 1..10

    ! parameters
    lands_size: array(lands) of real !m*m

    crops_name: array(crops) of string
    crops_yield: array(crops) of real ! kg/m*m
    crops_sewing_costs: array(crops) of real ! pound/m*m
    crops_pirce: array(crops) of real ! pound/kg

    ! cows_sell_price: array(1..10) of real
    cows_sell_price: array(years) of real
    calf_purchase = 200 ! pound
    cows_space = 5 ! m*m
    cows_grain = 15 ! kg/year
    grain_price = 50 ! pound/kg

    ! variables
    plant: array(crops,years,lands) of mpvar ! plant units m*m
    rear: array(years, lands) of mpvar ! the cows rear in the farm each years
    calf: array(years) of mpvar ! the amount of calfs bought in the start of each years

    ! auxiliary variables
    x: array(activities,lands,years) of mpvar ! {0,1}

    ! extra constrains variables
    plant_grain: array(years) of mpvar ! plant grain for cow
    bought_grain: array(years) of mpvar ! bought for cow
  end-declarations

! --- initialisations --- !
  initialisations from "Farm_Co.dat"
    crops_name lands_size crops_yield crops_sewing_costs cows_sell_price crops_pirce
  end-initialisations


! --- constrains --- !
! cows and calfs are integer！
  forall(y in years, l in lands,c in crops,a in activities) do
    x(a,l,y) is_binary
    calf(y) is_integer
    rear(y,l) is_integer
    plant(c,y,l) >= 0
    rear(y,l) >= 0
    calf(y) >= 0
    plant_grain(y) >= 0
    bought_grain(y) >= 0
  end-do

! arrangement of activity (1 block of land only use in 1 activity)
forall(y in years,l in lands)
  sum(a in activities) x(a,l,y) <= 1

! the relation beween total cows amount and new calf
forall(y in years) do
  if y = 1 then
    sum(l in lands) rear(y,l) = calf(y)
  else
    sum(l in lands) rear(y,l) = sum(l in lands)rear((y-1),l) + calf(y)
  end-if
end-do

! grain: relation between bought grain and planted grain, grain to feed and grain to sell
forall(y in years) do
  if y = 1 then
    sum(l in lands) rear(y,l)*cows_grain <= bought_grain(y)
  else
    sum(l in lands) rear(y,l)*cows_grain <= plant_grain(y-1) + bought_grain(y)
  end-if
end-do
forall(y in years) do
  sum(l in lands) plant(1,y,l)*3 >= plant_grain(y)
end-do

! the size limite
forall(y in years,l in lands) do
  plant(1,y,l) <= lands_size(l)*x(1,y,l)
  plant(2,y,l) <= lands_size(l)*x(2,y,l)
  plant(3,y,l) <= lands_size(l)*x(3,y,l)
  rear(y,l)*5 <= lands_size(l)*x(4,y,l)
end-do

! 50% constrain( 50% of total land: from week7 piazza)
forall(c in crops,y in years) do
  sum(l in lands)plant(c,y,l) <= sum(l in lands)lands_size(l)*0.5
  sum(l in lands)(rear(y,l)*cows_space) <= sum(l in lands)lands_size(l)*0.5
end-do

! --- objective function ---!
  cows_profit:= sum(y in years)calf(y)*cows_sell_price(y)
  crops_profit:= sum(c in crops,y in years,l in lands)plant(c,y,l)*crops_yield(c)*crops_pirce(c)
  cows_costs:= sum(y in years) calf(y)*200
  plant_costs:= sum(c in crops,y in years,l in lands)plant(c,y,l)*crops_sewing_costs(c)
  grain_costs:= sum(y in years) plant_grain(y)*4.5 + sum(y in years)bought_grain(y)*50

  profit:= cows_profit + crops_profit - cows_costs - plant_costs - grain_costs
  ! incomes(selling cows and crops, minus grains plant for cows) - costs(crops, buy clafs, buy grains)


! --- problem type --- !
  maximise(profit)

! --- outputs --- !
! Overview results
writeln("The profit is: ",getobjval)

writeln("This is the plan for planting crops:")
forall(y in years, c in crops, l in lands) do
  if getsol(plant(c,y,l))>0 then
    writeln("plant ",getsol(plant(c,y,l))," ",crops_name(c)," on land ",l," in year",y)
  end-if
end-do

writeln
writeln("This is the plan for rearing cows:")
forall(y in years) do
  if getsol(calf(y)) > 0 then
    writeln("buy ",getsol(calf(y))," calf in year",y)
  end-if
end-do

writeln
forall(y in years,l in lands) do
  if getsol(rear(y,l)) > 0 then
    writeln("rear ",getsol(rear(y,l))," cows on land ",l," in year ",y)
  end-if
end-do

writeln
if sum(y in years)getsol(bought_grain(y)) = 0 then
  writeln("do not buy grain")
else
  forall(y in years) do
    writeln("bug ",getsol(bought_grain(y))," grain in year ",y)
  end-do
end-if
end-model